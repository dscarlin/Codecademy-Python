PYTHON SYNTAX

Hello World!

A print statement is the easiest way to get your Python program to communicate with you

Using a print statement, output a message of your choosing to the terminal.

print "hello world"
>
hello world




Print Statements

Both Python 2 and Python 3 are used throughout the globe. The most significant difference between the two is how you write a print statement. In Python 3, print has parentheses.

Print something using Python 3's syntax.

print ("hello world")
>hello world




Strings

Text in Python is considered a specific type of data called a string. A string, so named because they're a series of letters, numbers, or symbols connected in order — as if threaded together by string. Strings can be defined in different ways:

print "This is a good string"
print 'You can use single quotes or double quotes for a string'

Try adding your name to the print statement with the + operator so that this Python program prints "Hello [your_name]"

print "Hello " + "David"
>Hello David




Handling Errors

As we get more familiar with the Python programming language, we run into errors and exceptions. These are complaints that Python makes when it doesn't understand what you want it to do.

Here are some common errors that we might run into when printing strings:

print "Mismatched quotes will cause a SyntaxError'
print Without quotes will cause a NameError
>SyntaxError: EOL while scanning string literal
>SyntaxError: invalid syntax




Variables

In Python, and when programming in general, we need to build systems for dealing with data that changes over time.

Create a variable called todays_date and assign a value that will represent today's date to that variable.

todays_date = "December 7, 2018"




Arithmetic

One thing computers are capable of doing exceptionally well is performing arithmetic.
Combinations of arithmetical operators follow the usual order of operations.

Python also offers a companion to division called the modulo operator. The modulo operator is indicated by % and returns the remainder after division is performed.

Multiply two numbers together and assign the result to a variable called product.

product = 2*3
print product
>6

What is the remainder when 1398 is divided by 11? Save the results in a variable called remainder.

remainder = 1398 % 11
print remainder
>1




Updating Variables

Updating a variable by adding or subtracting a number to the original contents of the variable has its own shorthand to make it faster and easier to read.

money_in_wallet = 40
sandwich_price = 7.50
sales_tax = .08 * sandwich_price

sandwich_price += sales_tax
money_in_wallet -= sandwich_price




Comments

A line of text preceded by a # is called a comment. The machine does not run this code — it is only for humans to read. When you look back at your code later, comments may help you figure out what it was intended to do.

# this variable counts how many rows of the spreadsheet we have:
row_count = 13




Numbers

Variables can also hold numeric values. The simplest kind of number in Python is the integer, which is a whole number with no decimal point:

int1 = 1
int2 = 10
int3 = -5

A number with a decimal point is called a float. You can define floats with numbers after the decimal point or by just including a decimal point at the end:

float1 = 1.0
float2 = 10.
float3 = -5.5

You can also define a float using scientific notation, with e indicating the power of 10:

# this evaluates to 150:
float4 = 1.5e2




Two Types of Division

In Python 2, when we divide two integers if the numbers do not divide evenly, the result of the division is truncated into an integer. In other words, the quotient is rounded down to a whole number.

To yield a float as the result instead, programmers often change either the numerator or the denominator (or both) to be a float:

quotient1 = 7./2
# the value of quotient1 is 3.5
quotient2 = 7/2.
# the value of quotient2 is 3.5
quotient3 = 7./2.
# the value of quotient3 is 3.5
An alternative way is to use the float() method:

quotient1 = float(7)/2 
# the value of quotient1 is 3.5

You have come home from the grocery store with 100 cucumbers to split amongst yourself and your 5 roommates (6 people total).

cucumbers = 100
num_people = 6

whole_cucumbers_per_person = cucumbers/num_people
print whole_cucumbers_per_person

float_cucumbers_per_person = float(cucumbers)/num_people
print float_cucumbers_per_person
>16
>16.6666666667




Multi-line Strings

If we want a string to span multiple lines, we can also use triple quotes:

address_string = """136 Whowho Rd
Apt 7
Whosville, WZ 44494"""

When a string like this is not assigned to a variable, it works as a multi-line comment.


Create a variable called haiku and store this haiku as a multi-line string:

haiku = '''The old pond,
A frog jumps in:
Plop!'''




Booleans

Sometimes we have a need for variables that are either true or false. This datatype, which can only ever take one of two values, is called a boolean. In Python, we define booleans using the keywords True and False:

a = True
b = False

A boolean is actually a special case of an integer. A value of True corresponds to an integer value of 1, and will behave the same. A value of False corresponds to an integer value of 0.




ValueError

A variable with the value 7 is an integer, 7. is a float, "7" is a string. Sometimes we will want to convert variables to different datatypes. For example, if we wanted to print out an integer as part of a string, we would want to convert that integer to a string first. We can do that using str():

age = 13
print "I am " + str(age) + " years old!"
This would print:

>>> "I am 13 years old!"
Similarly, if we have a string like "7" and we want to perform arithmetic operations on it, we must convert it to a numeric datatype. We can do this using int():

number1 = "100"
number2 = "10"

string_addition = number1 + number2 
#string_addition now has a value of "10010"

int_addition = int(number1) + int(number2)
#int_addition has a value of 110
If you use int() on a floating point number, it will round the number down. To preserve the decimal, you can use float():

string_num = "7.5"
print int(string_num)
print float(string_num)
>>> 7
>>> 7.5




Review

Great! So far we’ve looked at:

Print statements
How to create, modify, and use variables
Arithmetic operations like addition, subtraction, division, and multiplication
How to use comments to make your code easy to understand
Different data types, including strings, ints, floats, and booleans
Converting between data types

skill_completed = '''Python 
Syntax'''
exercises_completed = "13.5"
#The variable point_total will change as we gain points
points_per_exercise = "5"
point_total = 1e2
'''if we do not designate a string 
number with a decimal as a float when 
performing arithmetic, we will not see 
any remainder that may be there'''
point_total += float(exercises_completed)*int(points_per_exercise)
print 'I got ' + str(point_total) + " points!"
>I got 167.5 points!




STRINGS & CONSOLE OUTPUT

Strings

Another useful data type is the string. A string can contain letters, numbers, and symbols.




Escaping characters

There are some characters that cause problems. For example:

print 'There's a snake in my boot!'
>            ^
>SyntaxError: invalid syntax

This code breaks because Python thinks the apostrophe in 'There's' ends the string. We can use the backslash to fix the problem, like this:

print 'There\'s a snake in my boot!'
>There's a snake in my boot!

Another solution to this issue can be:

print "This wouldn't work with single quotes"
>This wouldn't work with single quotes




Access by Index

Each character in a string is assigned a number. This number is called the index. Check out the diagram

+---+---+---+---+---+---+
| P | Y | T | H | O | N |
+---+---+---+---+---+---+
  0   1   2   3   4   5

P = "PYTHON"[0]
n = "Ryan"[3]

fifth_letter = "MONTY"[4]
print fifth_letter
>Y

If we assign this string to a variable, the syntax to access by index would be:

name = "MONTY"
print name[4]
>Y




String methods

Now that we know how to store strings, let's see how we can change them using string methods.

String methods let you perform specific tasks for strings.

We'll focus on four string methods:

len()
lower()
upper()
str()

Let's start with len(), which gets the length (the number of characters including spaces) of a string!

parrot ="Norwegian Blue"
print len(parrot)
>14

You can use the lower() method to get rid of all the capitalization in your strings. You call lower() like so:

"Ryan".lower()
which will return "ryan"

parrot = "Norwegian Blue" .lower()

print parrot
>norwegian blue

You can use the upper() method to get rid of all the capitalization in your strings. You call upper() like so:

parrot = "norwegian blue"

print parrot.upper()

Now let's look at str(), which is a little less straightforward. The str() method turns non-strings into strings!

pi = 3.14
print "only " + str(pi) + " slices left"




Dot Notation

Let's take a closer look at why you use len(string) and str(object), but dot notation (such as "String".upper()) for the rest.

***Methods that use dot notation only work with strings.***

On the other hand, len() and str() can work on other data types.



Editor and Console

The "editor" is the place where we have been writing our code. The "console" is where the results of the code are shown.




String Concatenation

You know about strings, and you know about arithmetic operators. Now let's combine the two!

print "Life " + "of " + "Brian"
This will print out the phrase: Life of Brian.

print "I have " + str(2) + " coconuts!"
This will print: I have 2 coconuts!.



String Formatting with % *** Complex

When you want to print a variable with a string, there is a better method than concatenating strings together.

name = "Mike"
print "Hello %s" % (name)
>Hello Mike

The % operator after the string is used to combine a string with variables. The % operator will replace the %s in the string with the string variable that comes after it.

If you'd like to print a variable that is an integer, you can "pad" it with zeros using %. The 2 means "length of field", the 2 means to pad to 2 characters wide, and the d means the number is a signed integer (can be positive or negative).

day = 6
print "03 - %s - 2019" %  (day)
# 03 - 6 - 2019
print "03 - %d - 2019" % (day)
# 03 - 06 - 2019


%d is the format code for an integer.  %f is the format code for a float.

%s prints the str() of an object (What you see when you print(object)).

%r prints the repr() of an object (What you see when you print(repr(object)).

%f prints the float() of an object (What you see when you print(repr(object)) **with specifications listed below

For a float %s, %r and %f all display the same value(with subtle difference of notation displayed in example below of truncating to a number of specified characters or decimals), but that isn't the case for all objects. The other fields of a format specifier work differently as well:

>>> print('%10.2s' % 1.123) # print as string, truncate to 2 characters in a 10-place field.
        1.

>>>print ('%10.2r % 1.123) # print an evaluatable string, truncate to 2 characters in a 10-place 

	1.

>>> print('%10.2f' % 1.123) # print as float, round to 2 decimal places in a 10-place field.
      1.12

*****the length of the field will auto adjust if not specified with all three (s,f,r) and will display the full value but f will default to six decimal places and pad with zeros if not specified. Also d will default to auto adjust length of field but will never display anything after decimal (only integer value)

Example of repr():

s = 'Hello, Geeks.'
print repr(s) 
print repr(2.0/11.0)

'Hello, Geeks.'
0.18181818181818182

From above output, we can see if we print string using repr() function then it prints with a pair of quotes and if we calculate a value we get more precise value than str() function.

str() is used for creating output for end user while repr() is mainly used for debugging and development. repr’s goal is to be unambiguous and str’s is to be readable. For example, if we suspect a float has a small rounding error, repr will show us while str may not.
repr() compute the “official” string representation of an object (a representation that has all information about the abject) and str() is used to compute the “informal” string representation of an object (a representation that is useful for printing the object).
The print statement and str() built-in function uses __str__ to display the string representation of the object while the repr() built-in function uses __repr__ to display the object.

Let understand this by an example:-

import datetime 
today = datetime.datetime.now() 
  
# Prints readable format for date-time object 
print str(today) 
  
# prints the official format of date-time object 
print repr(today)    

Output:

2016-02-22 19:32:04.078030
datetime.datetime(2016, 2, 22, 19, 32, 4

How to make them work for our own defined classes?
A user defined class should also have a __repr__ if we need detailed information for debugging. And if we think it would be useful to have a string version for users, we create a __str__ function.

# Python program to demonstrate writing of __repr__ and 
# __str__ for user defined classes 
  
# A user defined class to represent Complex numbers 
class Complex: 
  
    # Constructor 
    def __init__(self, real, imag): 
       self.real = real 
       self.imag = imag 
  
    # For call to repr(). Prints object's information 
    def __repr__(self): 
       return 'Rational(%s, %s)' % (self.real, self.imag)     
  
    # For call to str(). Prints readable form 
    def __str__(self): 
       return '%s + i%s' % (self.real, self.imag)     
  
  
# Driver program to test above 
t = Complex(10, 20) 
  
print str(t)  # Same as "print t" 
print repr(t) 
Output:

10 + i20
Rational(10, 20)




String Formatting Part 2

You need the same number of %s terms in a string as the number of variables in parentheses:

print "The %s who %s %s!" % ("Knights", "say", "Ni")
# This will print "The Knights who say Ni!"



string = "toby"

def cap_word (x):
	cap_letter = x[0].upper()
	l= len(x)
	print cap_letter + x[1:l]
  
cap_word(string)





